// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // split instructions
    Not(in=instruction[15], out=aInst);
    Not(in=aInst, out=cInst);
    Mux16(sel=cInst, a=false, b=instruction,
        out[12]=aCode,
        out[11]=zx,
        out[10]=nx,
        out[9]=zy,
        out[8]=ny,
        out[7]=f,
        out[6]=no,
        out[5]=loadA,
        out[4]=loadD,
        out[3]=loadM,
        out[2]=jumpLt,
        out[1]=jumpEq,
        out[0]=jumpGt);

    // pick input of A register
    // is a c-instruction and loadA
    And(a=cInst, b=loadA, out=loadALUoutToA);
    Mux16(a=instruction, b=outALU, sel=loadALUoutToA, out=aRegInput);

    // load the A register
    Or(a=aInst, b=loadALUoutToA, out=loadAreg);

    // if aInst = true, load entire into A Register
    ARegister(in=aRegInput, load=loadAreg, out=aRegOut, out[0..14]=addressM);

    // if cInstr = true && a-bit == 1, loadA. else load inM
    Mux16(a=aRegOut, b=inM, sel=aCode, out=inALU);

    // if loadD = true, load the D register
    And(a=cInst, b=loadD, out=loadDreg);
    DRegister(in=outALU, load=loadDreg, out=dRegOut);

    ALU(
        // ALU inputs
        x=dRegOut,
        y=inALU, 
        // C-instruction comp bits
        zx=zx,
        nx=nx,
        zy=zy,
        ny=ny,
        f=f,
        no=no,
        // ALU outputs
        out=outALU,
        out=outM, // M value output
        zr=zr,
        ng=ng);

    // Program counter stores address of the next instruction
    // out < 0
    And(a=jumpLt, b=ng, out=lessThan);
    // out = 1
    And(a=jumpEq, b=zr, out=equal);
    // out > 0
    Or(a=zr, b=ng, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=tmpK);

    And(a=tmpK, b=jumpGt, out=greaterThan);

    Or(a=lessThan, b=equal, out=jle);
    Or(a=jle, b=greaterThan, out=shouldJump);

    // only jump if c-instruction
    And(a=shouldJump, b=cInst, out=load);

    Not(in=load, out=inc);

    // pc
    PC(in=aRegOut, load=load, inc=inc, reset=reset, out[0..14]=pc);

    // write to M if d3 is true
    And(a=loadM, b=true, out=writeM);
}
